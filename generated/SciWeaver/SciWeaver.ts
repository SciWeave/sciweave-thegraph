// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateDao extends ethereum.Event {
  get params(): CreateDao__Params {
    return new CreateDao__Params(this);
  }
}

export class CreateDao__Params {
  _event: CreateDao;

  constructor(event: CreateDao) {
    this._event = event;
  }

  get dao(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMasterBaseDao extends ethereum.Event {
  get params(): SetMasterBaseDao__Params {
    return new SetMasterBaseDao__Params(this);
  }
}

export class SetMasterBaseDao__Params {
  _event: SetMasterBaseDao;

  constructor(event: SetMasterBaseDao) {
    this._event = event;
  }

  get masterBaseDao(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetMasterDaoLogic extends ethereum.Event {
  get params(): SetMasterDaoLogic__Params {
    return new SetMasterDaoLogic__Params(this);
  }
}

export class SetMasterDaoLogic__Params {
  _event: SetMasterDaoLogic;

  constructor(event: SetMasterDaoLogic) {
    this._event = event;
  }

  get masterDaoLogic(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SciWeaver__daoInfosResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }

  getDao(): Address {
    return this.value0;
  }

  getCreatedAt(): BigInt {
    return this.value1;
  }

  getCreator(): Address {
    return this.value2;
  }

  getAccessToken(): Address {
    return this.value3;
  }

  getInvestorToken(): Address {
    return this.value4;
  }

  getMemberToken(): Address {
    return this.value5;
  }
}

export class SciWeaver__getDaoInfoResultValue0Struct extends ethereum.Tuple {
  get dao(): Address {
    return this[0].toAddress();
  }

  get createdAt(): BigInt {
    return this[1].toBigInt();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get accessToken(): Address {
    return this[3].toAddress();
  }

  get investorToken(): Address {
    return this[4].toAddress();
  }

  get memberToken(): Address {
    return this[5].toAddress();
  }
}

export class SciWeaver extends ethereum.SmartContract {
  static bind(address: Address): SciWeaver {
    return new SciWeaver("SciWeaver", address);
  }

  baseDaoAddress(): Address {
    let result = super.call("baseDaoAddress", "baseDaoAddress():(address)", []);

    return result[0].toAddress();
  }

  try_baseDaoAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "baseDaoAddress",
      "baseDaoAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daoInfos(param0: Address): SciWeaver__daoInfosResult {
    let result = super.call(
      "daoInfos",
      "daoInfos(address):(address,uint256,address,address,address,address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SciWeaver__daoInfosResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_daoInfos(
    param0: Address
  ): ethereum.CallResult<SciWeaver__daoInfosResult> {
    let result = super.tryCall(
      "daoInfos",
      "daoInfos(address):(address,uint256,address,address,address,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SciWeaver__daoInfosResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  daos(param0: BigInt): Address {
    let result = super.call("daos", "daos(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_daos(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("daos", "daos(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDaoInfo(_dao: Address): SciWeaver__getDaoInfoResultValue0Struct {
    let result = super.call(
      "getDaoInfo",
      "getDaoInfo(address):((address,uint256,address,address,address,address))",
      [ethereum.Value.fromAddress(_dao)]
    );

    return changetype<SciWeaver__getDaoInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDaoInfo(
    _dao: Address
  ): ethereum.CallResult<SciWeaver__getDaoInfoResultValue0Struct> {
    let result = super.tryCall(
      "getDaoInfo",
      "getDaoInfo(address):((address,uint256,address,address,address,address))",
      [ethereum.Value.fromAddress(_dao)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SciWeaver__getDaoInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getTotalAmountInvested(): BigInt {
    let result = super.call(
      "getTotalAmountInvested",
      "getTotalAmountInvested():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalAmountInvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalAmountInvested",
      "getTotalAmountInvested():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalAmountInvestedByInvestor(_investor: Address): BigInt {
    let result = super.call(
      "getTotalAmountInvestedByInvestor",
      "getTotalAmountInvestedByInvestor(address):(uint256)",
      [ethereum.Value.fromAddress(_investor)]
    );

    return result[0].toBigInt();
  }

  try_getTotalAmountInvestedByInvestor(
    _investor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalAmountInvestedByInvestor",
      "getTotalAmountInvestedByInvestor(address):(uint256)",
      [ethereum.Value.fromAddress(_investor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalNumberOfDaos(): BigInt {
    let result = super.call(
      "getTotalNumberOfDaos",
      "getTotalNumberOfDaos():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalNumberOfDaos(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalNumberOfDaos",
      "getTotalNumberOfDaos():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  investmentsByUser(param0: Address): BigInt {
    let result = super.call(
      "investmentsByUser",
      "investmentsByUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_investmentsByUser(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "investmentsByUser",
      "investmentsByUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isValidDao(_dao: Address): boolean {
    let result = super.call("isValidDao", "isValidDao(address):(bool)", [
      ethereum.Value.fromAddress(_dao)
    ]);

    return result[0].toBoolean();
  }

  try_isValidDao(_dao: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidDao", "isValidDao(address):(bool)", [
      ethereum.Value.fromAddress(_dao)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  masterAccessToken(): Address {
    let result = super.call(
      "masterAccessToken",
      "masterAccessToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_masterAccessToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterAccessToken",
      "masterAccessToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterBaseDao(): Address {
    let result = super.call("masterBaseDao", "masterBaseDao():(address)", []);

    return result[0].toAddress();
  }

  try_masterBaseDao(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterBaseDao",
      "masterBaseDao():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterDaoLogic(): Address {
    let result = super.call("masterDaoLogic", "masterDaoLogic():(address)", []);

    return result[0].toAddress();
  }

  try_masterDaoLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterDaoLogic",
      "masterDaoLogic():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterInvestorToken(): Address {
    let result = super.call(
      "masterInvestorToken",
      "masterInvestorToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_masterInvestorToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterInvestorToken",
      "masterInvestorToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterMemberToken(): Address {
    let result = super.call(
      "masterMemberToken",
      "masterMemberToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_masterMemberToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterMemberToken",
      "masterMemberToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalInvested(): BigInt {
    let result = super.call("totalInvested", "totalInvested():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalInvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInvested",
      "totalInvested():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _masterBaseDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _masterDaoLogic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _accessToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _memberToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _investorToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateDaoCall extends ethereum.Call {
  get inputs(): CreateDaoCall__Inputs {
    return new CreateDaoCall__Inputs(this);
  }

  get outputs(): CreateDaoCall__Outputs {
    return new CreateDaoCall__Outputs(this);
  }
}

export class CreateDaoCall__Inputs {
  _call: CreateDaoCall;

  constructor(call: CreateDaoCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _minFundingDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxFundingDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _researchResultVotingDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _quoromNumeratorValue(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateDaoCall__Outputs {
  _call: CreateDaoCall;

  constructor(call: CreateDaoCall) {
    this._call = call;
  }
}

export class IncreaseInvestmentCall extends ethereum.Call {
  get inputs(): IncreaseInvestmentCall__Inputs {
    return new IncreaseInvestmentCall__Inputs(this);
  }

  get outputs(): IncreaseInvestmentCall__Outputs {
    return new IncreaseInvestmentCall__Outputs(this);
  }
}

export class IncreaseInvestmentCall__Inputs {
  _call: IncreaseInvestmentCall;

  constructor(call: IncreaseInvestmentCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseInvestmentCall__Outputs {
  _call: IncreaseInvestmentCall;

  constructor(call: IncreaseInvestmentCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMasterBaseDaoCall extends ethereum.Call {
  get inputs(): SetMasterBaseDaoCall__Inputs {
    return new SetMasterBaseDaoCall__Inputs(this);
  }

  get outputs(): SetMasterBaseDaoCall__Outputs {
    return new SetMasterBaseDaoCall__Outputs(this);
  }
}

export class SetMasterBaseDaoCall__Inputs {
  _call: SetMasterBaseDaoCall;

  constructor(call: SetMasterBaseDaoCall) {
    this._call = call;
  }

  get _masterBaseDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMasterBaseDaoCall__Outputs {
  _call: SetMasterBaseDaoCall;

  constructor(call: SetMasterBaseDaoCall) {
    this._call = call;
  }
}

export class SetMasterDaoLogicCall extends ethereum.Call {
  get inputs(): SetMasterDaoLogicCall__Inputs {
    return new SetMasterDaoLogicCall__Inputs(this);
  }

  get outputs(): SetMasterDaoLogicCall__Outputs {
    return new SetMasterDaoLogicCall__Outputs(this);
  }
}

export class SetMasterDaoLogicCall__Inputs {
  _call: SetMasterDaoLogicCall;

  constructor(call: SetMasterDaoLogicCall) {
    this._call = call;
  }

  get _masterDaoLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMasterDaoLogicCall__Outputs {
  _call: SetMasterDaoLogicCall;

  constructor(call: SetMasterDaoLogicCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
